// uart_app.c
#include <stdio.h>
#include "system.h"
#include "io.h"

int main() {
    // Parameters
    int done = 0;
    int byte_count = 0;
    int execute_cmd;
    char command[7];
    char led_cmd[4];
    char led_num[4];
    unsigned char tmp_rx_buf;
    unsigned char rx_buf[40];
    unsigned int button_data = 0;
    unsigned int switch_data = 0;
    unsigned int led_data = 0;
    unsigned int mask = 0x00000003;

    // Ask Users to Enter a Command
    printf("---Enter a command---\n\r");

    // Loop until users enter finish command
    while (done == 0) {
        execute_cmd = 0;
        memset(rx_buf, '\0', sizeof(rx_buf));
        byte_count = 0;

        // Build up UART Message
        while (execute_cmd == 0) {
            // Read UART Data
            tmp_rx_buf = IORD(UART_BASE, 0);

            rx_buf[byte_count] = tmp_rx_buf;

            if (rx_buf[byte_count] == '\n')
                execute_cmd = 1;

            byte_count++;
        }

        // Build of the command arrays
        memcpy(command, &rx_buf[0], 6);
        memcpy(led_cmd, &rx_buf[0], 3);
        memcpy(led_num, &rx_buf[4], 3);

        // Null terminate all strings
        command[6] = '\0';
        led_cmd[3] = '\0';
        led_num[3] = '\0';

        // Read in the Button & Switch Data
//        button_data = IORD(BUTTON_BASE, 0);
        switch_data = IORD(SWITCH_BASE, 0);

        // Button is pulled high, so flip 2 lsb bits
//        button_data ^= mask;

        // Execute received command
        if (strcmp(led_cmd, "led") == 0) {
            led_data = led_num[2] - 48;

            if ((led_num[1] - 48) >= 1)
                led_data += ((led_num[1] - 48) * 10);

            if ((led_num[0] - 48) >= 1)
                led_data += ((led_num[0] - 48) * 100);

            // Write LED value to output LEDs
            IOWR(LED_BASE, 0, led_data);
        }
        else if (strcmp(command, "button") == 0)
            printf("Button Status: %u\n\r");
        else if (strcmp(command, "switch") == 0)
            printf("Switch Status: %u\n\r", switch_data);
        else if (strcmp(command, "finish") == 0)
            done = 1;
        else
            printf("Command is invalid, re-enter below:\n\r");
    }

    printf("---Exiting main---\n\r");
    return 0;
}
